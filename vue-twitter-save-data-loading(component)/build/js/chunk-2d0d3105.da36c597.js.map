{"version":3,"sources":["webpack:///./node_modules/intersection-observer/intersection-observer.js"],"names":["window","IntersectionObserverEntry","prototype","Object","defineProperty","get","this","intersectionRatio","document","registry","IntersectionObserver","THROTTLE_TIMEOUT","POLL_INTERVAL","USE_MUTATION_OBSERVER","observe","target","isTargetAlreadyObserved","_observationTargets","some","item","element","nodeType","Error","_registerInstance","push","entry","_monitorIntersections","_checkForIntersections","unobserve","filter","length","_unmonitorIntersections","_unregisterInstance","disconnect","takeRecords","records","_queuedEntries","slice","_initThresholds","opt_threshold","threshold","Array","isArray","sort","t","i","a","isNaN","_parseRootMargin","opt_rootMargin","marginString","margins","split","map","margin","parts","exec","value","parseFloat","unit","_monitoringIntersections","_monitoringInterval","setInterval","addEvent","_domObserver","MutationObserver","attributes","childList","characterData","subtree","clearInterval","removeEvent","rootIsInDom","_rootIsInDom","rootRect","_getRootRect","getEmptyRect","forEach","targetRect","getBoundingClientRect","rootContainsTarget","_rootContainsTarget","oldEntry","intersectionRect","_computeTargetAndRootIntersection","newEntry","time","now","boundingClientRect","rootBounds","_hasCrossedThreshold","isIntersecting","_callback","getComputedStyle","display","parent","getParentNode","atRoot","parentRect","parentComputedStyle","root","body","documentElement","overflow","computeRectIntersection","html","top","left","right","clientWidth","width","bottom","clientHeight","height","_expandRectByRootMargin","rect","_rootMarginValues","newRect","oldRatio","newRatio","thresholds","containsDeep","indexOf","index","splice","targetArea","intersectionArea","Number","toFixed","callback","opt_options","options","throttle","bind","rootMargin","join","performance","fn","timeout","timer","setTimeout","node","event","opt_useCapture","addEventListener","attachEvent","removeEventListener","detatchEvent","rect1","rect2","Math","max","min","el","err","child","parentNode","host","assignedSlot"],"mappings":"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","file":"js/chunk-2d0d3105.da36c597.js","sourcesContent":["/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n *\n */\n(function() {\n'use strict';\n\n// Exit early if we're not running in a browser.\nif (typeof window !== 'object') {\n  return;\n}\n\n// Exit early if all IntersectionObserver and IntersectionObserverEntry\n// features are natively supported.\nif ('IntersectionObserver' in window &&\n    'IntersectionObserverEntry' in window &&\n    'intersectionRatio' in window.IntersectionObserverEntry.prototype) {\n\n  // Minimal polyfill for Edge 15's lack of `isIntersecting`\n  // See: https://github.com/w3c/IntersectionObserver/issues/211\n  if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {\n    Object.defineProperty(window.IntersectionObserverEntry.prototype,\n      'isIntersecting', {\n      get: function () {\n        return this.intersectionRatio > 0;\n      }\n    });\n  }\n  return;\n}\n\n\n/**\n * A local reference to the document.\n */\nvar document = window.document;\n\n\n/**\n * An IntersectionObserver registry. This registry exists to hold a strong\n * reference to IntersectionObserver instances currently observing a target\n * element. Without this registry, instances without another reference may be\n * garbage collected.\n */\nvar registry = [];\n\n\n/**\n * Creates the global IntersectionObserverEntry constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry\n * @param {Object} entry A dictionary of instance properties.\n * @constructor\n */\nfunction IntersectionObserverEntry(entry) {\n  this.time = entry.time;\n  this.target = entry.target;\n  this.rootBounds = entry.rootBounds;\n  this.boundingClientRect = entry.boundingClientRect;\n  this.intersectionRect = entry.intersectionRect || getEmptyRect();\n  this.isIntersecting = !!entry.intersectionRect;\n\n  // Calculates the intersection ratio.\n  var targetRect = this.boundingClientRect;\n  var targetArea = targetRect.width * targetRect.height;\n  var intersectionRect = this.intersectionRect;\n  var intersectionArea = intersectionRect.width * intersectionRect.height;\n\n  // Sets intersection ratio.\n  if (targetArea) {\n    // Round the intersection ratio to avoid floating point math issues:\n    // https://github.com/w3c/IntersectionObserver/issues/324\n    this.intersectionRatio = Number((intersectionArea / targetArea).toFixed(4));\n  } else {\n    // If area is zero and is intersecting, sets to 1, otherwise to 0\n    this.intersectionRatio = this.isIntersecting ? 1 : 0;\n  }\n}\n\n\n/**\n * Creates the global IntersectionObserver constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface\n * @param {Function} callback The function to be invoked after intersection\n *     changes have queued. The function is not invoked if the queue has\n *     been emptied by calling the `takeRecords` method.\n * @param {Object=} opt_options Optional configuration options.\n * @constructor\n */\nfunction IntersectionObserver(callback, opt_options) {\n\n  var options = opt_options || {};\n\n  if (typeof callback != 'function') {\n    throw new Error('callback must be a function');\n  }\n\n  if (options.root && options.root.nodeType != 1) {\n    throw new Error('root must be an Element');\n  }\n\n  // Binds and throttles `this._checkForIntersections`.\n  this._checkForIntersections = throttle(\n      this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT);\n\n  // Private properties.\n  this._callback = callback;\n  this._observationTargets = [];\n  this._queuedEntries = [];\n  this._rootMarginValues = this._parseRootMargin(options.rootMargin);\n\n  // Public properties.\n  this.thresholds = this._initThresholds(options.threshold);\n  this.root = options.root || null;\n  this.rootMargin = this._rootMarginValues.map(function(margin) {\n    return margin.value + margin.unit;\n  }).join(' ');\n}\n\n\n/**\n * The minimum interval within which the document will be checked for\n * intersection changes.\n */\nIntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;\n\n\n/**\n * The frequency in which the polyfill polls for intersection changes.\n * this can be updated on a per instance basis and must be set prior to\n * calling `observe` on the first target.\n */\nIntersectionObserver.prototype.POLL_INTERVAL = null;\n\n/**\n * Use a mutation observer on the root element\n * to detect intersection changes.\n */\nIntersectionObserver.prototype.USE_MUTATION_OBSERVER = true;\n\n\n/**\n * Starts observing a target element for intersection changes based on\n * the thresholds values.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.observe = function(target) {\n  var isTargetAlreadyObserved = this._observationTargets.some(function(item) {\n    return item.element == target;\n  });\n\n  if (isTargetAlreadyObserved) {\n    return;\n  }\n\n  if (!(target && target.nodeType == 1)) {\n    throw new Error('target must be an Element');\n  }\n\n  this._registerInstance();\n  this._observationTargets.push({element: target, entry: null});\n  this._monitorIntersections();\n  this._checkForIntersections();\n};\n\n\n/**\n * Stops observing a target element for intersection changes.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.unobserve = function(target) {\n  this._observationTargets =\n      this._observationTargets.filter(function(item) {\n\n    return item.element != target;\n  });\n  if (!this._observationTargets.length) {\n    this._unmonitorIntersections();\n    this._unregisterInstance();\n  }\n};\n\n\n/**\n * Stops observing all target elements for intersection changes.\n */\nIntersectionObserver.prototype.disconnect = function() {\n  this._observationTargets = [];\n  this._unmonitorIntersections();\n  this._unregisterInstance();\n};\n\n\n/**\n * Returns any queue entries that have not yet been reported to the\n * callback and clears the queue. This can be used in conjunction with the\n * callback to obtain the absolute most up-to-date intersection information.\n * @return {Array} The currently queued entries.\n */\nIntersectionObserver.prototype.takeRecords = function() {\n  var records = this._queuedEntries.slice();\n  this._queuedEntries = [];\n  return records;\n};\n\n\n/**\n * Accepts the threshold value from the user configuration object and\n * returns a sorted array of unique threshold values. If a value is not\n * between 0 and 1 and error is thrown.\n * @private\n * @param {Array|number=} opt_threshold An optional threshold value or\n *     a list of threshold values, defaulting to [0].\n * @return {Array} A sorted list of unique and valid threshold values.\n */\nIntersectionObserver.prototype._initThresholds = function(opt_threshold) {\n  var threshold = opt_threshold || [0];\n  if (!Array.isArray(threshold)) threshold = [threshold];\n\n  return threshold.sort().filter(function(t, i, a) {\n    if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {\n      throw new Error('threshold must be a number between 0 and 1 inclusively');\n    }\n    return t !== a[i - 1];\n  });\n};\n\n\n/**\n * Accepts the rootMargin value from the user configuration object\n * and returns an array of the four margin values as an object containing\n * the value and unit properties. If any of the values are not properly\n * formatted or use a unit other than px or %, and error is thrown.\n * @private\n * @param {string=} opt_rootMargin An optional rootMargin value,\n *     defaulting to '0px'.\n * @return {Array<Object>} An array of margin objects with the keys\n *     value and unit.\n */\nIntersectionObserver.prototype._parseRootMargin = function(opt_rootMargin) {\n  var marginString = opt_rootMargin || '0px';\n  var margins = marginString.split(/\\s+/).map(function(margin) {\n    var parts = /^(-?\\d*\\.?\\d+)(px|%)$/.exec(margin);\n    if (!parts) {\n      throw new Error('rootMargin must be specified in pixels or percent');\n    }\n    return {value: parseFloat(parts[1]), unit: parts[2]};\n  });\n\n  // Handles shorthand.\n  margins[1] = margins[1] || margins[0];\n  margins[2] = margins[2] || margins[0];\n  margins[3] = margins[3] || margins[1];\n\n  return margins;\n};\n\n\n/**\n * Starts polling for intersection changes if the polling is not already\n * happening, and if the page's visibility state is visible.\n * @private\n */\nIntersectionObserver.prototype._monitorIntersections = function() {\n  if (!this._monitoringIntersections) {\n    this._monitoringIntersections = true;\n\n    // If a poll interval is set, use polling instead of listening to\n    // resize and scroll events or DOM mutations.\n    if (this.POLL_INTERVAL) {\n      this._monitoringInterval = setInterval(\n          this._checkForIntersections, this.POLL_INTERVAL);\n    }\n    else {\n      addEvent(window, 'resize', this._checkForIntersections, true);\n      addEvent(document, 'scroll', this._checkForIntersections, true);\n\n      if (this.USE_MUTATION_OBSERVER && 'MutationObserver' in window) {\n        this._domObserver = new MutationObserver(this._checkForIntersections);\n        this._domObserver.observe(document, {\n          attributes: true,\n          childList: true,\n          characterData: true,\n          subtree: true\n        });\n      }\n    }\n  }\n};\n\n\n/**\n * Stops polling for intersection changes.\n * @private\n */\nIntersectionObserver.prototype._unmonitorIntersections = function() {\n  if (this._monitoringIntersections) {\n    this._monitoringIntersections = false;\n\n    clearInterval(this._monitoringInterval);\n    this._monitoringInterval = null;\n\n    removeEvent(window, 'resize', this._checkForIntersections, true);\n    removeEvent(document, 'scroll', this._checkForIntersections, true);\n\n    if (this._domObserver) {\n      this._domObserver.disconnect();\n      this._domObserver = null;\n    }\n  }\n};\n\n\n/**\n * Scans each observation target for intersection changes and adds them\n * to the internal entries queue. If new entries are found, it\n * schedules the callback to be invoked.\n * @private\n */\nIntersectionObserver.prototype._checkForIntersections = function() {\n  var rootIsInDom = this._rootIsInDom();\n  var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();\n\n  this._observationTargets.forEach(function(item) {\n    var target = item.element;\n    var targetRect = getBoundingClientRect(target);\n    var rootContainsTarget = this._rootContainsTarget(target);\n    var oldEntry = item.entry;\n    var intersectionRect = rootIsInDom && rootContainsTarget &&\n        this._computeTargetAndRootIntersection(target, rootRect);\n\n    var newEntry = item.entry = new IntersectionObserverEntry({\n      time: now(),\n      target: target,\n      boundingClientRect: targetRect,\n      rootBounds: rootRect,\n      intersectionRect: intersectionRect\n    });\n\n    if (!oldEntry) {\n      this._queuedEntries.push(newEntry);\n    } else if (rootIsInDom && rootContainsTarget) {\n      // If the new entry intersection ratio has crossed any of the\n      // thresholds, add a new entry.\n      if (this._hasCrossedThreshold(oldEntry, newEntry)) {\n        this._queuedEntries.push(newEntry);\n      }\n    } else {\n      // If the root is not in the DOM or target is not contained within\n      // root but the previous entry for this target had an intersection,\n      // add a new record indicating removal.\n      if (oldEntry && oldEntry.isIntersecting) {\n        this._queuedEntries.push(newEntry);\n      }\n    }\n  }, this);\n\n  if (this._queuedEntries.length) {\n    this._callback(this.takeRecords(), this);\n  }\n};\n\n\n/**\n * Accepts a target and root rect computes the intersection between then\n * following the algorithm in the spec.\n * TODO(philipwalton): at this time clip-path is not considered.\n * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo\n * @param {Element} target The target DOM element\n * @param {Object} rootRect The bounding rect of the root after being\n *     expanded by the rootMargin value.\n * @return {?Object} The final intersection rect object or undefined if no\n *     intersection is found.\n * @private\n */\nIntersectionObserver.prototype._computeTargetAndRootIntersection =\n    function(target, rootRect) {\n\n  // If the element isn't displayed, an intersection can't happen.\n  if (window.getComputedStyle(target).display == 'none') return;\n\n  var targetRect = getBoundingClientRect(target);\n  var intersectionRect = targetRect;\n  var parent = getParentNode(target);\n  var atRoot = false;\n\n  while (!atRoot) {\n    var parentRect = null;\n    var parentComputedStyle = parent.nodeType == 1 ?\n        window.getComputedStyle(parent) : {};\n\n    // If the parent isn't displayed, an intersection can't happen.\n    if (parentComputedStyle.display == 'none') return;\n\n    if (parent == this.root || parent == document) {\n      atRoot = true;\n      parentRect = rootRect;\n    } else {\n      // If the element has a non-visible overflow, and it's not the <body>\n      // or <html> element, update the intersection rect.\n      // Note: <body> and <html> cannot be clipped to a rect that's not also\n      // the document rect, so no need to compute a new intersection.\n      if (parent != document.body &&\n          parent != document.documentElement &&\n          parentComputedStyle.overflow != 'visible') {\n        parentRect = getBoundingClientRect(parent);\n      }\n    }\n\n    // If either of the above conditionals set a new parentRect,\n    // calculate new intersection data.\n    if (parentRect) {\n      intersectionRect = computeRectIntersection(parentRect, intersectionRect);\n\n      if (!intersectionRect) break;\n    }\n    parent = getParentNode(parent);\n  }\n  return intersectionRect;\n};\n\n\n/**\n * Returns the root rect after being expanded by the rootMargin value.\n * @return {Object} The expanded root rect.\n * @private\n */\nIntersectionObserver.prototype._getRootRect = function() {\n  var rootRect;\n  if (this.root) {\n    rootRect = getBoundingClientRect(this.root);\n  } else {\n    // Use <html>/<body> instead of window since scroll bars affect size.\n    var html = document.documentElement;\n    var body = document.body;\n    rootRect = {\n      top: 0,\n      left: 0,\n      right: html.clientWidth || body.clientWidth,\n      width: html.clientWidth || body.clientWidth,\n      bottom: html.clientHeight || body.clientHeight,\n      height: html.clientHeight || body.clientHeight\n    };\n  }\n  return this._expandRectByRootMargin(rootRect);\n};\n\n\n/**\n * Accepts a rect and expands it by the rootMargin value.\n * @param {Object} rect The rect object to expand.\n * @return {Object} The expanded rect.\n * @private\n */\nIntersectionObserver.prototype._expandRectByRootMargin = function(rect) {\n  var margins = this._rootMarginValues.map(function(margin, i) {\n    return margin.unit == 'px' ? margin.value :\n        margin.value * (i % 2 ? rect.width : rect.height) / 100;\n  });\n  var newRect = {\n    top: rect.top - margins[0],\n    right: rect.right + margins[1],\n    bottom: rect.bottom + margins[2],\n    left: rect.left - margins[3]\n  };\n  newRect.width = newRect.right - newRect.left;\n  newRect.height = newRect.bottom - newRect.top;\n\n  return newRect;\n};\n\n\n/**\n * Accepts an old and new entry and returns true if at least one of the\n * threshold values has been crossed.\n * @param {?IntersectionObserverEntry} oldEntry The previous entry for a\n *    particular target element or null if no previous entry exists.\n * @param {IntersectionObserverEntry} newEntry The current entry for a\n *    particular target element.\n * @return {boolean} Returns true if a any threshold has been crossed.\n * @private\n */\nIntersectionObserver.prototype._hasCrossedThreshold =\n    function(oldEntry, newEntry) {\n\n  // To make comparing easier, an entry that has a ratio of 0\n  // but does not actually intersect is given a value of -1\n  var oldRatio = oldEntry && oldEntry.isIntersecting ?\n      oldEntry.intersectionRatio || 0 : -1;\n  var newRatio = newEntry.isIntersecting ?\n      newEntry.intersectionRatio || 0 : -1;\n\n  // Ignore unchanged ratios\n  if (oldRatio === newRatio) return;\n\n  for (var i = 0; i < this.thresholds.length; i++) {\n    var threshold = this.thresholds[i];\n\n    // Return true if an entry matches a threshold or if the new ratio\n    // and the old ratio are on the opposite sides of a threshold.\n    if (threshold == oldRatio || threshold == newRatio ||\n        threshold < oldRatio !== threshold < newRatio) {\n      return true;\n    }\n  }\n};\n\n\n/**\n * Returns whether or not the root element is an element and is in the DOM.\n * @return {boolean} True if the root element is an element and is in the DOM.\n * @private\n */\nIntersectionObserver.prototype._rootIsInDom = function() {\n  return !this.root || containsDeep(document, this.root);\n};\n\n\n/**\n * Returns whether or not the target element is a child of root.\n * @param {Element} target The target element to check.\n * @return {boolean} True if the target element is a child of root.\n * @private\n */\nIntersectionObserver.prototype._rootContainsTarget = function(target) {\n  return containsDeep(this.root || document, target);\n};\n\n\n/**\n * Adds the instance to the global IntersectionObserver registry if it isn't\n * already present.\n * @private\n */\nIntersectionObserver.prototype._registerInstance = function() {\n  if (registry.indexOf(this) < 0) {\n    registry.push(this);\n  }\n};\n\n\n/**\n * Removes the instance from the global IntersectionObserver registry.\n * @private\n */\nIntersectionObserver.prototype._unregisterInstance = function() {\n  var index = registry.indexOf(this);\n  if (index != -1) registry.splice(index, 1);\n};\n\n\n/**\n * Returns the result of the performance.now() method or null in browsers\n * that don't support the API.\n * @return {number} The elapsed time since the page was requested.\n */\nfunction now() {\n  return window.performance && performance.now && performance.now();\n}\n\n\n/**\n * Throttles a function and delays its execution, so it's only called at most\n * once within a given time period.\n * @param {Function} fn The function to throttle.\n * @param {number} timeout The amount of time that must pass before the\n *     function can be called again.\n * @return {Function} The throttled function.\n */\nfunction throttle(fn, timeout) {\n  var timer = null;\n  return function () {\n    if (!timer) {\n      timer = setTimeout(function() {\n        fn();\n        timer = null;\n      }, timeout);\n    }\n  };\n}\n\n\n/**\n * Adds an event handler to a DOM node ensuring cross-browser compatibility.\n * @param {Node} node The DOM node to add the event handler to.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to add.\n * @param {boolean} opt_useCapture Optionally adds the even to the capture\n *     phase. Note: this only works in modern browsers.\n */\nfunction addEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.addEventListener == 'function') {\n    node.addEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.attachEvent == 'function') {\n    node.attachEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Removes a previously added event handler from a DOM node.\n * @param {Node} node The DOM node to remove the event handler from.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to remove.\n * @param {boolean} opt_useCapture If the event handler was added with this\n *     flag set to true, it should be set to true here in order to remove it.\n */\nfunction removeEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.removeEventListener == 'function') {\n    node.removeEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.detatchEvent == 'function') {\n    node.detatchEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Returns the intersection between two rect objects.\n * @param {Object} rect1 The first rect.\n * @param {Object} rect2 The second rect.\n * @return {?Object} The intersection rect or undefined if no intersection\n *     is found.\n */\nfunction computeRectIntersection(rect1, rect2) {\n  var top = Math.max(rect1.top, rect2.top);\n  var bottom = Math.min(rect1.bottom, rect2.bottom);\n  var left = Math.max(rect1.left, rect2.left);\n  var right = Math.min(rect1.right, rect2.right);\n  var width = right - left;\n  var height = bottom - top;\n\n  return (width >= 0 && height >= 0) && {\n    top: top,\n    bottom: bottom,\n    left: left,\n    right: right,\n    width: width,\n    height: height\n  };\n}\n\n\n/**\n * Shims the native getBoundingClientRect for compatibility with older IE.\n * @param {Element} el The element whose bounding rect to get.\n * @return {Object} The (possibly shimmed) rect of the element.\n */\nfunction getBoundingClientRect(el) {\n  var rect;\n\n  try {\n    rect = el.getBoundingClientRect();\n  } catch (err) {\n    // Ignore Windows 7 IE11 \"Unspecified error\"\n    // https://github.com/w3c/IntersectionObserver/pull/205\n  }\n\n  if (!rect) return getEmptyRect();\n\n  // Older IE\n  if (!(rect.width && rect.height)) {\n    rect = {\n      top: rect.top,\n      right: rect.right,\n      bottom: rect.bottom,\n      left: rect.left,\n      width: rect.right - rect.left,\n      height: rect.bottom - rect.top\n    };\n  }\n  return rect;\n}\n\n\n/**\n * Returns an empty rect object. An empty rect is returned when an element\n * is not in the DOM.\n * @return {Object} The empty rect.\n */\nfunction getEmptyRect() {\n  return {\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    width: 0,\n    height: 0\n  };\n}\n\n/**\n * Checks to see if a parent element contains a child element (including inside\n * shadow DOM).\n * @param {Node} parent The parent element.\n * @param {Node} child The child element.\n * @return {boolean} True if the parent node contains the child node.\n */\nfunction containsDeep(parent, child) {\n  var node = child;\n  while (node) {\n    if (node == parent) return true;\n\n    node = getParentNode(node);\n  }\n  return false;\n}\n\n\n/**\n * Gets the parent node of an element or its host element if the parent node\n * is a shadow root.\n * @param {Node} node The node whose parent to get.\n * @return {Node|null} The parent node or null if no parent exists.\n */\nfunction getParentNode(node) {\n  var parent = node.parentNode;\n\n  if (parent && parent.nodeType == 11 && parent.host) {\n    // If the parent is a shadow root, return the host element.\n    return parent.host;\n  }\n\n  if (parent && parent.assignedSlot) {\n    // If the parent is distributed in a <slot>, return the parent of a slot.\n    return parent.assignedSlot.parentNode;\n  }\n\n  return parent;\n}\n\n\n// Exposes the constructors globally.\nwindow.IntersectionObserver = IntersectionObserver;\nwindow.IntersectionObserverEntry = IntersectionObserverEntry;\n\n}());\n"],"sourceRoot":""}